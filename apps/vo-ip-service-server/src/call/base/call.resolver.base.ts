/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Call } from "./Call";
import { CallCountArgs } from "./CallCountArgs";
import { CallFindManyArgs } from "./CallFindManyArgs";
import { CallFindUniqueArgs } from "./CallFindUniqueArgs";
import { CreateCallArgs } from "./CreateCallArgs";
import { UpdateCallArgs } from "./UpdateCallArgs";
import { DeleteCallArgs } from "./DeleteCallArgs";
import { CallService } from "../call.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Call)
export class CallResolverBase {
  constructor(
    protected readonly service: CallService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Call",
    action: "read",
    possession: "any",
  })
  async _callsMeta(
    @graphql.Args() args: CallCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Call])
  @nestAccessControl.UseRoles({
    resource: "Call",
    action: "read",
    possession: "any",
  })
  async calls(@graphql.Args() args: CallFindManyArgs): Promise<Call[]> {
    return this.service.calls(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Call, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Call",
    action: "read",
    possession: "own",
  })
  async call(@graphql.Args() args: CallFindUniqueArgs): Promise<Call | null> {
    const result = await this.service.call(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Call)
  @nestAccessControl.UseRoles({
    resource: "Call",
    action: "create",
    possession: "any",
  })
  async createCall(@graphql.Args() args: CreateCallArgs): Promise<Call> {
    return await this.service.createCall({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Call)
  @nestAccessControl.UseRoles({
    resource: "Call",
    action: "update",
    possession: "any",
  })
  async updateCall(@graphql.Args() args: UpdateCallArgs): Promise<Call | null> {
    try {
      return await this.service.updateCall({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Call)
  @nestAccessControl.UseRoles({
    resource: "Call",
    action: "delete",
    possession: "any",
  })
  async deleteCall(@graphql.Args() args: DeleteCallArgs): Promise<Call | null> {
    try {
      return await this.service.deleteCall(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
